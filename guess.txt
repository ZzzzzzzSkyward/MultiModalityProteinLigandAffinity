protein_test.npy：蛋白质测试集，保存了多个蛋白质的序列和结构信息。
compound_test_ver.npy：化合物测试集，保存了多个化合物的分子描述符信息。
compound_test_adj.npy：化合物测试集，保存了多个化合物的分子邻接矩阵信息。
prot_test_contacts.npy：蛋白质测试集，保存了多个蛋白质的接触矩阵信息。
prot_test_contacts_true.npy：蛋白质测试集，保存了多个蛋白质的真实接触矩阵信息。
prot_test_inter.npy：蛋白质测试集，保存了多个蛋白质和化合物的相互作用矩阵信息。
prot_test_inter_exist.npy：蛋白质测试集，保存了多个蛋白质和化合物的相互作用结果信息。
IC50_test.npy：化合物测试集，保存了多个化合物对应的IC50值信息。



可以使用氨基酸的性质来编码氨基酸序列，从而提供更丰富的信息。常用的氨基酸性质包括：

- 疏水性：描述氨基酸是否亲水或疏水。
- 极性：描述氨基酸是否具有极性。
- 荷电性：描述氨基酸是否带有正电荷、负电荷或者中性。
- 氨基酸大小：描述氨基酸的大小和体积。

下面介绍两种常见的将氨基酸性质编码到氨基酸序列中的方法：

1. 基于氨基酸属性的编码

在这种编码方式中，将每个氨基酸的属性编码为一个数值，并将其与氨基酸的标识符进行组合。例如，可以将氨基酸的标识符"A"编码为一个one-hot向量，然后添加一个浮点数表示氨基酸的疏水性、极性或者电荷值。最终，将这些编码向量组合成一个特征矩阵，用于训练模型或者进行预测。

2. 基于窗口滑动的编码

在这种编码方式中，将氨基酸序列分割成一系列重叠的窗口，然后针对每个窗口计算一组氨基酸性质的统计特征。例如，可以计算每个窗口中氨基酸的平均疏水性、极性或荷电性，然后将这些特征作为窗口的编码表示。这种编码方式通常用于序列到序列模型或者序列分类模型中。

需要注意的是，选择哪些氨基酸性质进行编码取决于具体的应用场景。在某些任务中，疏水性和荷电性可能更重要，而在其他任务中，氨基酸大小和极性可能更重要。因此，在选择氨基酸性质进行编码时，应根据具体的任务需求进行选择。